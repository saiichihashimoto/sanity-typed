# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
name: "Checks"
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

concurrency: checks-${{ github.ref == 'refs/heads/main' && 'main' || github.event.pull_request.head.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: actions/setup-node@v4.0.0
        with:
          node-version-file: "package.json"
          cache: "npm"
      - id: node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - run: npm ls --package-lock-only

      - run: |
          DRY_RUN=$(npx turbo run build --dry=json)
          HASH_CLIENT_MOCK=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/client-mock#build\")) | .hash")
          HASH_CLIENT=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/client#build\")) | .hash")
          HASH_FAKER=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/faker#build\")) | .hash")
          HASH_GROQ_JS=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/groq-js#build\")) | .hash")
          HASH_GROQ=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/groq#build\")) | .hash")
          HASH_TYPES=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/types#build\")) | .hash")
          HASH_ZOD=$(echo $DRY_RUN | jq --raw-output ".tasks[] | select(.taskId | contains(\"@sanity-typed/zod#build\")) | .hash")
          echo "HASH_CLIENT_MOCK=$HASH_CLIENT_MOCK" >> $GITHUB_ENV
          echo "HASH_CLIENT=$HASH_CLIENT" >> $GITHUB_ENV
          echo "HASH_FAKER=$HASH_FAKER" >> $GITHUB_ENV
          echo "HASH_GROQ_JS=$HASH_GROQ_JS" >> $GITHUB_ENV
          echo "HASH_GROQ=$HASH_GROQ" >> $GITHUB_ENV
          echo "HASH_TYPES=$HASH_TYPES" >> $GITHUB_ENV
          echo "HASH_ZOD=$HASH_ZOD" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_CLIENT_MOCK }}*
          key: turbo-cache-${{ env.HASH_CLIENT_MOCK }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_CLIENT }}*
          key: turbo-cache-${{ env.HASH_CLIENT }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_FAKER }}*
          key: turbo-cache-${{ env.HASH_FAKER }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_GROQ_JS }}*
          key: turbo-cache-${{ env.HASH_GROQ_JS }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_GROQ }}*
          key: turbo-cache-${{ env.HASH_GROQ }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_TYPES }}*
          key: turbo-cache-${{ env.HASH_TYPES }}
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo/${{ env.HASH_ZOD }}*
          key: turbo-cache-${{ env.HASH_ZOD }}

      - env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: npm run build

      - run: npm config set workspaces-update false
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx multi-semantic-release --ignore-private-packages
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-node@v4.0.0
        with:
          node-version-file: "package.json"
          cache: "npm"
      - id: node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - run: npm ls --package-lock-only
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - uses: actions/cache@v3
        with:
          path: .eslintcache
          key: eslint-${{ github.run_id }}
          restore-keys: |
            eslint-
      - uses: actions/cache@v3
        with:
          path: node_modules/.cache/prettier/.prettier-cache
          key: prettier-${{ github.run_id }}
          restore-keys: |
            prettier-

      - run: npm run lint
      - run: |
          if [[ $(git status --porcelain) != "" ]]; then
            git --no-pager diff --color --text HEAD
            exit 1
          fi
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [client, client-mock, faker, groq, groq-js, types, zod]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-node@v4.0.0
        with:
          node-version-file: "package.json"
          cache: "npm"
      - id: node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - run: npm ls --package-lock-only

      - id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v2
      - run: |
          JEST_CACHE_DIRECTORY=$(npx jest --color --showConfig | jq --raw-output ".configs[0].cacheDirectory")
          echo "JEST_CACHE_DIRECTORY=$JEST_CACHE_DIRECTORY" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ${{ env.JEST_CACHE_DIRECTORY }}
          key: jest-${{ matrix.package }}-${{ github.run_id }}
          restore-keys: |
            jest-${{ matrix.package }}-
            jest-

      - run: npm test -- --max-workers ${{ steps.cpu-cores.outputs.count }} -- ${{ matrix.package }}/src
